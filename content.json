{"meta":{"title":"学习笔记","subtitle":"xcw","description":"","author":"Json Xu","url":"http://yoursite.com","root":"/"},"pages":[{"title":"repository","date":"2020-04-27T11:42:56.000Z","updated":"2020-04-27T11:43:20.721Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-27T11:33:15.000Z","updated":"2020-04-27T11:42:24.761Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-27T11:32:40.000Z","updated":"2020-04-27T11:41:51.181Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo介绍","slug":"note/Hexo配置","date":"2020-04-27T12:47:36.379Z","updated":"2020-04-27T12:47:36.379Z","comments":false,"path":"2020/04/27/note/Hexo配置/","link":"","permalink":"http://yoursite.com/2020/04/27/note/Hexo%E9%85%8D%E7%BD%AE/","excerpt":"Hexo基本配置","text":"布局（Layout）123post source&#x2F;_postspage sourcedraft source&#x2F;_drafts 123456789101112131415161718192021new_post_name 新文章的文件名称 :title.mddefault_layout 预设布局 postauto_spacing 在中文和英文之间加入空格 falsetitlecase 把标题转换为 title case falseexternal_link 在新标签中打开链接 trueexternal_link.enable 在新标签中打开链接 trueexternal_link.field 对整个网站（site）生效或仅对文章（post）生效 siteexternal_link.exclude 需要排除的域名。主域名和子域名如 www 需分别配置 []filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0render_drafts 显示草稿 falsepost_asset_folder 启动 Asset 文件夹 falserelative_link 把链接改为与根目录的相对位址 falsefuture 显示未来的文章 truehighlight 代码块的设置 highlight.enable 开启代码块高亮 truehighlight.auto_detect 如果未指定语言，则启用自动检测 falsehighlight.line_number 显示行数Enabling this option will also enable wrap option truehighlight.tab_replace 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs &#39;&#39;highlight.wrap Wrap the code block in &lt;table&gt; truehighlight.hljs Use the hljs-* prefix for CSS classes false Front-matter12345678910Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：layout 布局 title 标题 文章的文件名date 建立日期 文件建立日期updated 更新日期 文件更新日期comments 开启文章的评论功能 truetags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 keywords 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Hexo 命令","slug":"note/Hexo_命令","date":"2020-04-27T12:43:32.240Z","updated":"2020-04-27T12:43:32.241Z","comments":false,"path":"2020/04/27/note/Hexo_命令/","link":"","permalink":"http://yoursite.com/2020/04/27/note/Hexo_%E5%91%BD%E4%BB%A4/","excerpt":"hexo 常用命令","text":"安装1234$ npm install hexo$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 创建新的博客1$ hexo new \"My New Post\" 开启博客1$ hexo server 生成1$ hexo generate ###部署 1$ hexo deploy 新建页面1$ hexo new [layout] &lt;title&gt; 知道路径1hexo new page --path about/me \"About me\"","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"game","slug":"game/H5","date":"2020-04-27T12:42:50.000Z","updated":"2020-04-27T12:42:51.001Z","comments":true,"path":"2020/04/27/game/H5/","link":"","permalink":"http://yoursite.com/2020/04/27/game/H5/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"test","slug":"game/sss","date":"2020-04-27T12:42:19.000Z","updated":"2020-04-27T12:42:19.027Z","comments":true,"path":"2020/04/27/game/sss/","link":"","permalink":"http://yoursite.com/2020/04/27/game/sss/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"This总结","slug":"web/Js-this","date":"2020-04-27T12:12:36.460Z","updated":"2020-04-27T12:12:36.460Z","comments":false,"path":"2020/04/27/web/Js-this/","link":"","permalink":"http://yoursite.com/2020/04/27/web/Js-this/","excerpt":"JavaScript this的总结。","text":"content{:toc} 本文为慕课网 JavaScript深入浅出 JavaScript 中的 this笔记。 全局的 this全局 this 一般指向全局对象，浏览器中的全局对象就是 window。 例如： 12345console.log(this.document === document); //trueconsole.log(this === window); //truethis.a = 91;console.log(window.a); //91 一般函数的 this1234function f1 () &#123; return this;&#125;console.log(f1() === window);//true, global object 可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object 12345function f2 () &#123; \"use strict\";//使用严格模式 return this;&#125;console.log(f1() === undefined);//true 严格模式中，函数的 this 为 undefined 作为对象方法的函数的 this1234567var o = &#123; prop: 37, f: function() &#123; return this.prop; &#125;&#125;;console.log(o.f()); // 37 上述代码通过字面量创建对象 o。 f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。 123456789var o = &#123; prop: 37&#125;;function independent() &#123; return this.prop;&#125;o.f = independent;console.log(o.f()); // 37 上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 o.f = independent 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。 对象原型链上的 this123456789var o = &#123; f: function() &#123; return this.a + this.b; &#125;&#125;;var p = Object.create(o);p.a = 1;p.b = 2;console.log(p.f()); //3 通过 var p = Object.create(o) 创建的对象，p 是基于原型 o 创建出的对象。 p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。 get/set 方法与 this12345678910111213141516function modulus() &#123; return Math.sqrt(this.re * this.re + this.im * this.im);&#125;var o = &#123; re: 1, im: -1, get phase() &#123; return Math.atan2(this.im, this.re); &#125;&#125;;Object.defineProperty(o, 'modulus', &#123; get: modulus, enumerable: true, configurable: true&#125;);console.log(o.phase, o.modulus); // -0.78 1.4142 get/set 方法中的 this 也会指向 get/set 方法所在的对象的。 构造器中的 this12345function MyClass() &#123; this.a = 25;&#125;var o = new MyClass();console.log(o.a); //25 new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。 123456789function C2() &#123; this.a = 26; return &#123; a: 24 &#125;;&#125;o = new C2();console.log(o.a); //24 因为返回了对象，将这个对象作为返回值 call/apply 方法与 this12345678910111213function add(c, d) &#123; return this.a + this.b + c + d;&#125;var o = &#123; a: 1, b: 3&#125;;add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34function bar() &#123; console.log(Object.prototype.toString.call(this));&#125;bar.call(7); // \"[object Number]\" bind 方法与 this12345678910111213function f() &#123; return this.a;&#125;var g = f.bind(&#123; a: \"test\"&#125;);console.log(g()); // testvar o = &#123; a: 37, f: f, g: g&#125;;console.log(o.f(), o.g()); // 37, test 绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"JS作用域","slug":"web/Js_作用域","date":"2020-04-27T12:03:03.512Z","updated":"2020-04-27T12:03:03.512Z","comments":false,"path":"2020/04/27/web/Js_作用域/","link":"","permalink":"http://yoursite.com/2020/04/27/web/Js_%E4%BD%9C%E7%94%A8%E5%9F%9F/","excerpt":"JavaScript 作用域和作用域链学习笔记。","text":"JavaScript 作用域作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。 全局作用域(Global Scope)在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。 最外层函数和在最外层函数外面定义的变量拥有全局作用域 123456789101112var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); &#125; innerFun();&#125;console.log(outVariable); //我是最外层变量outFun(); //内层变量console.log(inVariable); //inVariable is not definedinnerFun(); //innerFun is not defined 所有末定义直接赋值的变量自动声明为拥有全局作用域 1234567function outFun2() &#123; variable = \"未定义直接赋值的变量\"; var inVariable2 = \"内层变量2\";&#125;outFun2();//要先执行这个函数，否则根本不知道里面是啥console.log(variable); //未定义直接赋值的变量console.log(inVariable2); //inVariable2 is not defined 所有window对象的属性拥有全局作用域 window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。 局部作用域(Local Scope)和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域。 如 1. 中的变量 inVariable 和函数 innerFun 都只拥有局部作用域。 再补充几个例子 全局作用域，函数作用域，eval作用域 123456789var a = 10; // 全局(function() &#123; var b = 20;// 函数&#125;)();console.log(a); // 10console.log(b); // error, b in not definedeval(\"var a = 1;\"); // eval JavaScript 中没有块作用域 1234567for (var item in &#123; a: 1, b: 2&#125;) &#123; console.log(item);&#125;console.log(item); // item still in scope 作用域链(Scope Chain)在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。 在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。 函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。 这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。 当运行期上下文被销毁，活动对象也随之销毁。 在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。 例子举一个作用域链的例子。 123456789var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); var tempVariable = inVariable; &#125; innerFun();&#125; 对最开始的代码稍加修改 其作用域链为： 123456window├──outVariable└──outFun() ├──inVariable └──innerFun() └──tempVariable 对于 innerFun()，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。 特例-构造器创建的函数123456function outer() &#123; var i = 1; var func = new Function(\"console.log(typeof i);\"); func(); // undefined&#125;outer(); 通过构造器创建的函数是访问不到外层的局部变量的。 延长作用域链有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。 try-catch 语句中的 catch 块 with 语句 对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。 代码优化从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。 VO &amp; AO变量初始化阶段 JS解释器如何找到我们定义的函数和变量？ 变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的： 变量 函数声明 函数参数 VO按照如下顺序填充: 函数参数 (若未传入，初始化该参数值为undefined) 函数声明 (若发生命名冲突，会覆盖) 变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。) 12345678910111213141516171819202122232425function foo(x, y, z) &#123; function x() &#123;&#125;; console.log(x);&#125;foo(100); // funtion x()function foo2(x, y, z) &#123; var x = 50; console.log(x);&#125;foo2(110); // 50function foo3() &#123; function x() &#123;&#125;; var x = 100; console.log(x);&#125;foo3(); // 100function foo4() &#123; function x() &#123;&#125;; var x; console.log(x);&#125;foo4(); // funtion x() 注：函数表达式不会影响 VO 代码执行阶段给 VO 对象内的变量赋值。 VO 变为 AO （活动对象 activation object）。 例1234567891011121314151617alert(x); // functionvar x = 10;alert(x); // 10x = 20;function x() &#123;&#125;alert(x); // 20if (true) &#123; var a = 1;&#125; else &#123; var b = true;&#125;alert(a); // 1alert(b); // undefined 参考资料 鸟哥：Javascript作用域原理 理解 JavaScript 作用域和作用域链 JavaScript 深入浅出-慕课网","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Hexo 插件","slug":"note/Hexo_插件","date":"2020-04-27T12:01:08.852Z","updated":"2020-04-27T12:01:08.852Z","comments":false,"path":"2020/04/27/note/Hexo_插件/","link":"","permalink":"http://yoursite.com/2020/04/27/note/Hexo_%E6%8F%92%E4%BB%B6/","excerpt":"","text":"#hexo-autonofollowGithub：https://github.com/liuzc/hexo-autonofollow 简介：自动为站外链接添加nofollow属性 安装： 1$ npm install hexo-autonofollow --save 配置： 在博客配置文件_config.yml中添加 12345nofollow: enable: true exclude: - exclude1.com - exclude2.com enable - 是否启用 exclude - 排除域名 #hexo-baidu-url-submitGithub：https://github.com/huiwang/hexo-baidu-url-submit 简介：主动推送Hexo博客新链接至百度搜索引擎，解决百度爬虫被禁止访问的问题，提升网站收录质量和速度。 安装： $ npm install hexo-baidu-url-submit –save配置： 在博客配置文件_config.yml中添加 12345baidu_url_submit: count: 1 ## 提交最新的一个链接 host: blog.cofess.com ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 token - 您得注册百度站长工具，然后在工具-&gt;网页抓取-&gt;链接提交里找到你的密匙。其次，_config.ym文件中url的值， 必须是百度站长平台注册的域名， 比如: 1234# URLurl: blog.cofess.comroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; 最后，加入新的deployer: 12deploy:- type: baidu_url_submitter 执行hexo deploy的时候，新的链接就会被推送百度了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}