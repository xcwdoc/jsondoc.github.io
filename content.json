{"meta":{"title":"学习笔记","subtitle":"xcw","description":"","author":"Json Xu","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-04-27T11:33:15.000Z","updated":"2020-04-27T11:33:15.013Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-27T11:32:40.000Z","updated":"2020-04-27T11:32:40.836Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"_config.yml 备注","slug":"config详解","date":"2020-04-27T03:32:18.417Z","updated":"2020-04-27T03:32:18.418Z","comments":true,"path":"2020/04/27/config详解/","link":"","permalink":"http://yoursite.com/2020/04/27/config%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"Site12345678title: 学习笔记tags: testsubtitle: &#39;xcw&#39; 副标题description: &#39;&#39;主要用于SEO，告诉搜索引擎一个关于站点的简单描述keywords: &#39;&#39; 网站的关键词，使用半角逗号分隔开多个关键词，关键词对SEO的优化有一定的作用author: John Doelanguage: entimezone: &#39;&#39; ##URL 如果您的网站位于子目录中，请将url设置为’http://yoursite.com/child&#39;，将root设置为&#39;/child/&#39; 1234567url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # 设置为false时会将末尾的index.html去掉 trailing_html: true # 设置为false时会将末尾的.html去掉，对index.html无效 Directory12345678source_dir: source 出发文章的目录public_dir: public 存放生成文件的陌路tag_dir：按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同），这里给hello-world.md添加一个tagsarchive_dir: archives 归档文件夹，存放归档文件，默认值为archivescategory_dir: categories分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹code_dir: downloads&#x2F;code Include code 文件夹，source_dir 下的子目录，默认值为downloads&#x2F;codei18n_dir: :lang 国际化（i18n）文件夹，默认值:langskip_render:跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章，我们这样设置来忽略掉hello-world.md文件 ##主页设置 1234index_generator: path: '' per_page: 10 //每页显示的帖子数 order_by: -date // 帖子排序","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2020-04-27T02:47:01.000Z","updated":"2020-04-27T02:47:01.952Z","comments":true,"path":"2020/04/27/test/","link":"","permalink":"http://yoursite.com/2020/04/27/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"JavaScript 作用域和作用域链","slug":"hello-world","date":"2020-04-20T06:06:05.000Z","updated":"2020-04-27T08:58:34.657Z","comments":true,"path":"2020/04/20/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/20/hello-world/","excerpt":"JavaScript 作用域和作用域链学习笔记。","text":"创建新的博客1$ hexo new \"My New Post\" 开启博客1$ hexo server 生成1$ hexo generate ###部署 1$ hexo deploy","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"}]},{"title":"JavaScript 作用域和作用域链","slug":"JavaScript 作用域和作用域链","date":"2015-05-20T06:06:05.000Z","updated":"2020-04-27T08:47:01.762Z","comments":true,"path":"2015/05/20/JavaScript 作用域和作用域链/","link":"","permalink":"http://yoursite.com/2015/05/20/JavaScript%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/","excerpt":"JavaScript 作用域和作用域链学习笔记。","text":"content{:toc} JavaScript 作用域作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。 全局作用域(Global Scope)在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。 最外层函数和在最外层函数外面定义的变量拥有全局作用域 123456789101112var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); &#125; innerFun();&#125;console.log(outVariable); //我是最外层变量outFun(); //内层变量console.log(inVariable); //inVariable is not definedinnerFun(); //innerFun is not defined 所有末定义直接赋值的变量自动声明为拥有全局作用域 1234567function outFun2() &#123; variable = \"未定义直接赋值的变量\"; var inVariable2 = \"内层变量2\";&#125;outFun2();//要先执行这个函数，否则根本不知道里面是啥console.log(variable); //未定义直接赋值的变量console.log(inVariable2); //inVariable2 is not defined 所有window对象的属性拥有全局作用域 window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。 局部作用域(Local Scope)和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域。 如 1. 中的变量 inVariable 和函数 innerFun 都只拥有局部作用域。 再补充几个例子 全局作用域，函数作用域，eval作用域 123456789var a = 10; // 全局(function() &#123; var b = 20;// 函数&#125;)();console.log(a); // 10console.log(b); // error, b in not definedeval(\"var a = 1;\"); // eval JavaScript 中没有块作用域 1234567for (var item in &#123; a: 1, b: 2&#125;) &#123; console.log(item);&#125;console.log(item); // item still in scope 作用域链(Scope Chain)在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。 在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。 函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。 这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。 当运行期上下文被销毁，活动对象也随之销毁。 在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。 例子举一个作用域链的例子。 123456789var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); var tempVariable = inVariable; &#125; innerFun();&#125; 对最开始的代码稍加修改 其作用域链为： 123456window├──outVariable└──outFun() ├──inVariable └──innerFun() └──tempVariable 对于 innerFun()，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。 特例-构造器创建的函数123456function outer() &#123; var i = 1; var func = new Function(\"console.log(typeof i);\"); func(); // undefined&#125;outer(); 通过构造器创建的函数是访问不到外层的局部变量的。 延长作用域链有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。 try-catch 语句中的 catch 块 with 语句 对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。 代码优化从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。 VO &amp; AO变量初始化阶段 JS解释器如何找到我们定义的函数和变量？ 变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的： 变量 函数声明 函数参数 VO按照如下顺序填充: 函数参数 (若未传入，初始化该参数值为undefined) 函数声明 (若发生命名冲突，会覆盖) 变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。) 12345678910111213141516171819202122232425function foo(x, y, z) &#123; function x() &#123;&#125;; console.log(x);&#125;foo(100); // funtion x()function foo2(x, y, z) &#123; var x = 50; console.log(x);&#125;foo2(110); // 50function foo3() &#123; function x() &#123;&#125;; var x = 100; console.log(x);&#125;foo3(); // 100function foo4() &#123; function x() &#123;&#125;; var x; console.log(x);&#125;foo4(); // funtion x() 注：函数表达式不会影响 VO 代码执行阶段给 VO 对象内的变量赋值。 VO 变为 AO （活动对象 activation object）。 例1234567891011121314151617alert(x); // functionvar x = 10;alert(x); // 10x = 20;function x() &#123;&#125;alert(x); // 20if (true) &#123; var a = 1;&#125; else &#123; var b = true;&#125;alert(a); // 1alert(b); // undefined 参考资料 鸟哥：Javascript作用域原理 理解 JavaScript 作用域和作用域链 JavaScript 深入浅出-慕课网","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript 作用域 慕课网 ife","slug":"JavaScript-作用域-慕课网-ife","permalink":"http://yoursite.com/tags/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E6%85%95%E8%AF%BE%E7%BD%91-ife/"}]},{"title":"Hexo配置","slug":"Hexo博客常用插件及用法","date":"2015-05-20T06:06:05.000Z","updated":"2020-04-27T11:24:26.634Z","comments":true,"path":"2015/05/20/Hexo博客常用插件及用法/","link":"","permalink":"http://yoursite.com/2015/05/20/Hexo%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95/","excerpt":"JavaScript 作用域和作用域链学习笔记。","text":"#hexo-autonofollowGithub：https://github.com/liuzc/hexo-autonofollow 简介：自动为站外链接添加nofollow属性 安装： 1$ npm install hexo-autonofollow --save 配置： 在博客配置文件_config.yml中添加 12345nofollow: enable: true exclude: - exclude1.com - exclude2.com enable - 是否启用 exclude - 排除域名 #hexo-baidu-url-submitGithub：https://github.com/huiwang/hexo-baidu-url-submit 简介：主动推送Hexo博客新链接至百度搜索引擎，解决百度爬虫被禁止访问的问题，提升网站收录质量和速度。 安装： $ npm install hexo-baidu-url-submit –save配置： 在博客配置文件_config.yml中添加 12345baidu_url_submit: count: 1 ## 提交最新的一个链接 host: blog.cofess.com ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 token - 您得注册百度站长工具，然后在工具-&gt;网页抓取-&gt;链接提交里找到你的密匙。其次，_config.ym文件中url的值， 必须是百度站长平台注册的域名， 比如: 1234# URLurl: blog.cofess.comroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; 最后，加入新的deployer: 12deploy:- type: baidu_url_submitter 执行hexo deploy的时候，新的链接就会被推送百度了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"JavaScript 作用域 慕课网 ife","slug":"JavaScript-作用域-慕课网-ife","permalink":"http://yoursite.com/tags/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E6%85%95%E8%AF%BE%E7%BD%91-ife/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}